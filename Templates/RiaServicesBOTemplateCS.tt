

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#+
class RiaServicesBOTemplate: TextTransformation
{
    public string ClassName = null;
    public string TargetNamespaceName = null;
    public string SourceNamespaceName = null;
    public string EntityContainerName = null;
    public List<EntityType> Entities = null;
    public override string TransformText()
    {
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web.Ria;
using System.Web.Ria.Data;
using System.Web.DomainServices;
using System.Data;
using System.Web.DomainServices.LinqToEntities;
<#+if (!string.IsNullOrEmpty(this.TargetNamespaceName))
{#>
namespace <#= this.TargetNamespaceName#>
{
<#+
  }
#>
    [EnableClientAccess()]
    public class <#= ClassName#> : LinqToEntitiesDomainService<<#= EntityContainerName#>>
    {
<#+
        if (!string.IsNullOrEmpty(this.TargetNamespaceName))
            this.PushIndent("    ");
        this.PushIndent("    ");
        foreach (EntityType currentEntity in Entities)
        {
            if (currentEntity.BaseType != null)
            {
                WriteEntity(currentEntity.Name, CreateEntitySetName(currentEntity.BaseType.Name), CreateEntitySetName(currentEntity.Name), true);
            }
            else
            {
                WriteEntity(currentEntity.Name, CreateEntitySetName(currentEntity.Name), CreateEntitySetName(currentEntity.Name), false);
            }
        }
        if (!string.IsNullOrEmpty(this.TargetNamespaceName))
        {
            this.PopIndent();
            this.WriteLine("}");
        }
        this.PopIndent();
        this.WriteLine("}");
        return this.GenerationEnvironment.ToString();
    }
    private void WriteEntity(string entityName, string entitySetName, string pluralName, bool derived)
    {
#>
#region "<#= pluralName #>"
<#+
        this.PushIndent("    ");
        if (derived)
            WriteDerivedEntitySelect(entityName, entitySetName, pluralName);
        else
            WriteBaseEntitySelect(entityName, entitySetName, pluralName);
        this.WriteLine("");
        WriteEntityInsert(entityName, entitySetName);
        this.WriteLine("");
        WriteEntityUpdate(entityName);
        this.WriteLine("");
        WriteEntityDelete(entityName);
        this.WriteLine("");
        this.PopIndent();
#>
#endregion
<#+
}
       
    private void WriteBaseEntitySelect(string entityName, string entitySetName, string pluralName)
    {#>
[DataObjectMethod(DataObjectMethodType.Select)]
public IQueryable<<#= entityName #>> Get<#= pluralName #>()
{
    return this.Context.<#= entitySetName #>;
}            
    <#+
    }
    private void WriteDerivedEntitySelect(string entityName, string entitySetName, string pluralName)
    {#>
[DataObjectMethod(DataObjectMethodType.Select)]
public IQueryable<<#= entityName #>> Get<#= pluralName #>()
{
    return (IQueryable<<#= entityName #>>) from t in this.Context.<#= entitySetName #>
	       where t.GetType() == typeof(<#= entityName #>)
	       select t;
}            
     <#+
    }
    private void WriteEntityInsert(string entityName, string entitySetName)
    {#>
[DataObjectMethod(DataObjectMethodType.Insert)]
public void Insert<#= entityName #>(<#= entityName #> inserted)
{
	this.Context.AddTo<#= entitySetName #>(inserted);
}			
    <#+
    }
    private void WriteEntityUpdate(string entityName)
    {#>
[DataObjectMethod(DataObjectMethodType.Update)]
public void Update<#= entityName #>( <#= entityName #> current, <#= entityName #> original)
{
    this.Context.AttachAsModified(current, original);
}
    <#+
    }      
    private void WriteEntityDelete(string entityName)
    {#>
[DataObjectMethod(DataObjectMethodType.Delete)]
public void Delete<#= entityName #>(<#= entityName #> deleted)
{
    if (deleted.EntityState == System.Data.EntityState.Detached)
    {
        this.Context.Attach(deleted);
    }
    this.Context.DeleteObject(deleted);
}

    <#+
    }  
    private string CreateEntitySetName(string entityName)
	{
	    if (entityName.Substring(entityName.Length-1) == "s")
	    {
			return entityName + "es";
		}
		else if (entityName.Substring(entityName.Length-1) == "y" && entityName.Substring(entityName.Length-2) != "ay")
		{
			return entityName.Substring(0, entityName.Length -1) + "ies";
		}
		else
		{
			return entityName + "s";
		}
		
    }
}


#>

