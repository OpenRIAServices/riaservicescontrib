
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#+
class RiaServicesBOTemplate: TextTransformation
{
    public string ClassName = null;
    public string SourceNamespaceName = null;
    public string TargetNamespaceName = null;
    public string EntityContainerName = null;
    public List<EntityType> Entities = null;
    public override string TransformText()
    {
#>
Option Explicit On
Option Strict On
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Web.Ria
Imports System.Web.Ria.Data
Imports System.Web.DomainServices
Imports System.Data
Imports System.Web.DomainServices.LinqToEntities
<#+
  if (!string.IsNullOrEmpty(this.TargetNamespaceName))
#>
Namespace <#= this.TargetNamespaceName#>

    <EnableClientAccess()> _
    Public Class <#= ClassName#> 
        Inherits LinqToEntitiesDomainService(Of <#= EntityContainerName#>)

<#+
        if (!string.IsNullOrEmpty(this.TargetNamespaceName))
            this.PushIndent("    ");
        this.PushIndent("    ");
        foreach (EntityType currentEntity in Entities)
        {
            if (currentEntity.BaseType != null)
            {
                WriteEntity(currentEntity.Name, CreateEntitySetName(currentEntity.BaseType.Name), CreateEntitySetName(currentEntity.Name), true);
            }
            else
            {
                WriteEntity(currentEntity.Name, CreateEntitySetName(currentEntity.Name), CreateEntitySetName(currentEntity.Name), false);
            }
        }
        this.PopIndent();
        this.WriteLine("End Class");
        if (!string.IsNullOrEmpty(this.TargetNamespaceName))
        {
            this.PopIndent();
            this.WriteLine("End Namespace");
        }
        return this.GenerationEnvironment.ToString();
    }
    private void WriteEntity(string entityName, string entitySetName, string pluralName, bool derived)
    {
#>
#Region "<#= pluralName #>"
<#+
        this.PushIndent("    ");
        if (derived)            
            WriteDerivedEntitySelect(entityName, entitySetName, pluralName);
        else
            WriteBaseEntitySelect(entityName, entitySetName, pluralName);
        this.WriteLine("");
        WriteEntityInsert(entityName, entitySetName);
        this.WriteLine("");
        WriteEntityUpdate(entityName);
        this.WriteLine("");
        WriteEntityDelete(entityName);
        this.WriteLine("");
        this.PopIndent();
#>
#End Region
<#+
}

    private void WriteBaseEntitySelect(string entityName, string entitySetName, string pluralName)
    {#>
<DataObjectMethod(DataObjectMethodType.Select)> _
Public Function Get<#= pluralName #>() As IQueryable(Of <#= entityName #>)
    Return Me.Context.<#= entitySetName #>
End Function
    <#+
    }
    private void WriteDerivedEntitySelect(string entityName, string entitySetName, string pluralName)
    {#>
<DataObjectMethod(DataObjectMethodType.Select)> _
Public Function Get<#= pluralName #>() As IQueryable(Of <#= entityName #>)
    Return CType(( From t In Me.Context.<#= entitySetName #> _
	       Where TypeOf t Is <#= entityName #> _
	       Select t), IQueryable(Of <#= entityName #>))
End Function
     <#+
    }
    private void WriteEntityInsert(string entityName, string entitySetName)
    {#>
<DataObjectMethod(DataObjectMethodType.Insert)> _
Public Sub Insert<#= entityName #>(ByVal inserted As <#= entityName #>)
	Me.Context.AddTo<#= entitySetName #>(inserted)
End Sub
    <#+
    }
    private void WriteEntityUpdate(string entityName)
    {#>
<DataObjectMethod(DataObjectMethodType.Update)> _
Public Sub Update<#= entityName #>(ByVal current As <#= entityName #>,  original As <#= entityName #>)
            Me.Context.AttachAsModified(current, original)
End Sub
    <#+
    }      
    private void WriteEntityDelete(string entityName)
    {#>
<DataObjectMethod(DataObjectMethodType.Delete)> _
Public Sub Delete<#= entityName #>(deleted As <#= entityName #>)
    If deleted.EntityState = System.Data.EntityState.Detached Then
        Me.Context.Attach(deleted)
    End If
    Me.Context.DeleteObject(deleted)
End Sub
    <#+
    }  
    private string CreateEntitySetName(string entityName)
	{
	    if (entityName.Substring(entityName.Length-1) == "s")
	    {
			return entityName + "es";
		}
		else if (entityName.Substring(entityName.Length-1) == "y" && entityName.Substring(entityName.Length-2) != "ay")
		{
			return entityName.Substring(0, entityName.Length -1) + "ies";
		}
		else
		{
			return entityName + "s";
		}

    }
}


#>

