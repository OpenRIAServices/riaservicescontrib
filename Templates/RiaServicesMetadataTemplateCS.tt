
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.CodeDom" #>

<#+
class RiaServicesMetadataTemplate: TextTransformation
{
    public static string Footer = "}";
    public EntityType Entity = null;
    public bool WriteHeader = false;
    public string TargetNamespaceName =null;
    public string SourceNamespaceName = null;
    public Assembly SourceAssembly { get; set; }
    public override string TransformText()
    {
        if(WriteHeader)
        {
#>

    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web.Ria;
    using System.Web.Ria.Data;
    using System.Web.DomainServices;
    using System.Data.Objects.DataClasses;
    using System.Data;
<#+
            if (!string.IsNullOrEmpty(this.TargetNamespaceName))
            {
#>
namespace <#=this.TargetNamespaceName#>
{
<#+
            }  
        }
        this.PushIndent("    ");
        WriteEntity();
        this.PopIndent();
        return this.GenerationEnvironment.ToString();
    }
    private void WriteEntity()
    {
#>
#region "<#= CreateEntitySetName(Entity.Name) #>"
[MetadataType(typeof(<#= Entity.Name #>Metadata))]
public partial class <#= Entity.Name #>
{
}
		
public static partial class <#= Entity.Name #>Metadata
{
<#+
        this.PushIndent("    ");
        foreach (PropertyInfo currentProperty in GetEntityProperties(SourceAssembly, SourceNamespaceName + "." + Entity.Name))
        {            
            WriteProperty(currentProperty);            
        }
        this.PopIndent();
#>
}
#endregion
<#+
}
    private void WriteProperty(PropertyInfo currentProperty)
    {
        CodeTypeReferenceExpression type = new CodeTypeReferenceExpression(currentProperty.PropertyType);
        CodeDomProvider provider = Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#");
        StringWriter writer = new StringWriter();
        provider.GenerateCodeFromExpression(type, writer, new CodeGeneratorOptions());
#>

public static <#= writer.ToString() #> <#= currentProperty.Name #>;

<#+
    }    
     
    private string CreateEntitySetName(string entityName)
	{
	    if (entityName.Substring(entityName.Length-1) == "s")
	    {
			return entityName + "es";
		}
		else if (entityName.Substring(entityName.Length-1) == "y" && entityName.Substring(entityName.Length-2) != "ay")
		{
			return entityName.Substring(0, entityName.Length -1) + "ies";
		}
		else
		{
			return entityName + "s";
		}
		
    }
}


#>

