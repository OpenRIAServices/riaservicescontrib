
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.CodeDom" #>
<#+
class RiaServicesMetadataTemplate: TextTransformation
{
    public static string Footer = "End Namespace";
    public EntityType Entity = null;
    public bool WriteHeader = false;
    public string TargetNamespaceName =null;
    public string SourceNamespaceName = null;
    public Assembly SourceAssembly { get; set; }
    
    public override string TransformText()
    {
        if(WriteHeader)
        {
#>
Option Explicit On
Option Strict On
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Web.Ria
Imports System.Web.Ria.Data
Imports System.Web.DomainServices
Imports System.Data.Objects.DataClasses
Imports System.Data
<#+
  if (!string.IsNullOrEmpty(this.TargetNamespaceName))
#>
Namespace <#= this.TargetNamespaceName#>
<#+
        }
        this.PushIndent("    ");
        WriteEntity();
        this.PopIndent();
        return this.GenerationEnvironment.ToString();
    }
    private void WriteEntity()
    {
#>
#Region "<#= CreateEntitySetName(Entity.Name) #>"
<MetadataType(GetType(<#= Entity.Name #>Metadata))> _
Partial Public Class <#= Entity.Name #>
End Class
		
Partial Public NotInheritable Class <#= Entity.Name #>Metadata
    Private Sub New()
    End Sub
<#+
        this.PushIndent("    ");
        foreach (PropertyInfo currentProperty in GetEntityProperties(SourceAssembly, SourceNamespaceName + "." + Entity.Name))
        {            
            WriteProperty(currentProperty);            
        }
        this.PopIndent();
#>
End Class
#End Region
<#+
}
    private void WriteProperty(PropertyInfo currentProperty)
    {
         CodeTypeReferenceExpression type = new CodeTypeReferenceExpression(currentProperty.PropertyType);
        CodeDomProvider provider = Microsoft.VisualBasic.VBCodeProvider.CreateProvider("VB");
        StringWriter writer = new StringWriter();
        provider.GenerateCodeFromExpression(type, writer, new CodeGeneratorOptions());
#>

Public Shared <#= currentProperty.Name #> As <#= writer.ToString() #> 

<#+
    }    
     
    private string CreateEntitySetName(string entityName)
	{
	    if (entityName.Substring(entityName.Length-1) == "s")
	    {
			return entityName + "es";
		}
		else if (entityName.Substring(entityName.Length-1) == "y" && entityName.Substring(entityName.Length-2) != "ay")
		{
			return entityName.Substring(0, entityName.Length -1) + "ies";
		}
		else
		{
			return entityName + "s";
		}
		
    }
}


#>

