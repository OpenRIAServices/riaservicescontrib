
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.CodeDom" #>
<#+
class RiaServicesSharedInterfaceTemplate: TextTransformation
{
    public static string Footer = "End Namespace";
    public EntityType Entity = null;
    public bool WriteHeader = false;
    public string TargetNamespaceName = null;
    public string SourceNamespaceName = null;
    public Assembly SourceAssembly = null;
    public bool WireUp = false;
    
    public override string TransformText()
    {
        if(WriteHeader)
        {
#>
Option Explicit On
Option Strict On
Imports System
Imports System.Web.Ria.Data
<#+
  if (!string.IsNullOrEmpty(this.TargetNamespaceName))
#>
Namespace <#= this.TargetNamespaceName#>
<#+
        }
        this.PushIndent("    ");
        WriteEntity();
        this.PopIndent();
        return this.GenerationEnvironment.ToString();
    }
    private void WriteEntity()
    {
#>
#Region "<#= Entity.Name #>"
<#+
  if (Entity.BaseType == null)
  {
#>
Public Interface I<#= Entity.Name #>
<#+
    }
    else
    {
#>
Public Interface I<#= Entity.Name #>
Inherits I<#= Entity.BaseType.Name #>
<#+
    }
        this.PushIndent("    ");
        foreach (PropertyInfo currentProperty in GetEntityProperties(SourceAssembly, SourceNamespaceName + "." + Entity.Name))
        {
            WriteProperty(currentProperty, Entity.BaseType);
        }
        this.PopIndent();
#>
End Interface
<#+
  if (WireUp)
  {
#>
Public Partial Class <#= Entity.Name #>
    Implements I<#= Entity.Name #>
    <#+
        this.PushIndent("    ");

        foreach (PropertyInfo currentProperty in GetEntityProperties(SourceAssembly, SourceNamespaceName + "." + Entity.Name))
        {            
            WriteInterfaceProperty(currentProperty, Entity.Name);            
        }
        this.PopIndent();
#>
    
End Class
<#+
  }
#>
#End Region
<#+
}
    private void WriteProperty(PropertyInfo currentProperty, EdmType baseType)
    {
        if (IsPropertyImplementedByBaseClass(baseType, currentProperty.Name))
            return;
        CodeTypeReferenceExpression type = new CodeTypeReferenceExpression(currentProperty.PropertyType);
        CodeDomProvider provider = Microsoft.VisualBasic.VBCodeProvider.CreateProvider("VB");
        StringWriter writer = new StringWriter();
        provider.GenerateCodeFromExpression(type, writer, new CodeGeneratorOptions());
                    
#>
Property <#= currentProperty.Name #> As <#= writer.ToString() #>
<#+
    }    
    
        private void WriteInterfaceProperty(PropertyInfo currentProperty, string entityName)
    {
    CodeTypeReferenceExpression type = new CodeTypeReferenceExpression(currentProperty.PropertyType);
        CodeDomProvider provider = Microsoft.VisualBasic.VBCodeProvider.CreateProvider("VB");
        StringWriter writer = new StringWriter();
        provider.GenerateCodeFromExpression(type, writer, new CodeGeneratorOptions());
        String currentPropertyType = writer.ToString();
#>

Private Property Interface<#= currentProperty.Name #> As <#= currentPropertyType #> Implements I<#=entityName#>.<#= currentProperty.Name #>
        Get
            Return <#= currentProperty.Name #>
        End Get
        Set(ByVal value As <#= currentPropertyType #>)
            <#= currentProperty.Name #> = value
        End Set
    End Property
<#+
    } 

    private bool IsPropertyImplementedByBaseClass(EdmType baseType, string propertyName)
    {
        EntityType baseEntity = baseType as EntityType;
        if (baseType == null)
            return false;
        else if (baseEntity.Properties.Contains(propertyName))
        {
            return true;
        }
        else
        {
            return IsPropertyImplementedByBaseClass(baseEntity.BaseType, propertyName);
        }
    }
        

}


#>

