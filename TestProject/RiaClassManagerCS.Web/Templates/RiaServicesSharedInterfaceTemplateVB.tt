<#// <copyright file="RiaServicesMetadataTemplateVB.tt" company="Colin Blair">
//  Copyright © Colin Blair. All Rights Reserved.
// </copyright>
#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#+
class RiaServicesSharedInterfaceTemplate: TextTransformation
{
    public static string Footer = "End Namespace";
    public EntityType Entity = null;
    public bool WriteHeader = false;
    public string NamespaceName = null;
    public bool WireUp = false;
    
    public override string TransformText()
    {
        if(WriteHeader)
        {
#>
Option Explicit On
Option Strict On
Imports System
Imports System.Web.Ria.Data
<#+
  if (!string.IsNullOrEmpty(this.NamespaceName))
#>
Namespace <#= this.NamespaceName#>
<#+
        }
        this.PushIndent("    ");
        WriteEntity();
        this.PopIndent();
        return this.GenerationEnvironment.ToString();
    }
    private void WriteEntity()
    {
#>
#Region "<#= Entity.Name #>"
<#+
  if (Entity.BaseType == null)
  {
#>
Public Interface I<#= Entity.Name #>
<#+
    }
    else
    {
#>
Public Interface I<#= Entity.Name #>
Inherits I<#= Entity.BaseType.Name #>
<#+
    }
        this.PushIndent("    ");
        foreach (EdmProperty currentProperty in Entity.Properties)
        {            
            WriteProperty(currentProperty, Entity.BaseType);            
        }
        this.PopIndent();
#>
End Interface
<#+
  if (WireUp)
  {
#>
Public Partial Class <#= Entity.Name #>
    Implements I<#= Entity.Name #>
    <#+
        this.PushIndent("    ");
        foreach (EdmProperty currentProperty in Entity.Properties)
        {            
            WriteInterfaceProperty(currentProperty, Entity.Name);            
        }
        this.PopIndent();
#>
    
End Class
<#+
  }
#>
#End Region
<#+
}
    private void WriteProperty(EdmProperty currentProperty, EdmType baseType)
    {
        if (IsPropertyImplementedByBaseClass(baseType, currentProperty.Name))
            return;
        string currentPropertyType = currentProperty.TypeUsage.EdmType.ToString().Replace("Edm.","");

					if (currentPropertyType == "Int32")
						currentPropertyType = "Integer";
                    if (currentPropertyType == "Int16")
                        currentPropertyType = "Short";
                    if (currentPropertyType == "Int64")
                        currentPropertyType = "Long";
                    if (currentPropertyType == "UInt16")
                        currentPropertyType = "UShort";
                    if (currentPropertyType == "UInt32")
                        currentPropertyType = "UInteger";
                    if (currentPropertyType == "UInt64")
                        currentPropertyType = "ULong";
                    if ("DateTime|Date|Byte|SByte|Short|Integer|Long|UShort|UInteger|ULong|Single|Double|Boolean|Char|Decimal".Contains(currentPropertyType) && currentProperty.Nullable)
                        currentPropertyType = currentPropertyType + "?";
                    if (currentPropertyType == "Binary")
                    {
                        return; //Binary types are not currently being handled
                    }
                    
#>
Property <#= currentProperty.Name #> As <#= currentPropertyType #>
<#+
    }    
    
        private void WriteInterfaceProperty(EdmProperty currentProperty, string entityName)
    {
        string currentPropertyType = currentProperty.TypeUsage.EdmType.ToString().Replace("Edm.","");

					if (currentPropertyType == "Int32")
						currentPropertyType = "int";
                    if (currentPropertyType == "Int16")
                        currentPropertyType = "short";
                    if (currentPropertyType == "Int64")
                        currentPropertyType = "long";
                    if (currentPropertyType == "UInt16")
                        currentPropertyType = "ushort";
                    if (currentPropertyType == "UInt32")
                        currentPropertyType = "uint";
                    if (currentPropertyType == "UInt64")
                        currentPropertyType = "ulong";
                    if (currentPropertyType == "Byte")
                        currentPropertyType = "byte";
                    if (currentPropertyType == "SByte")
                        currentPropertyType = "sbyte";
                    if (currentPropertyType == "Single")
                        currentPropertyType = "float";
                    if (currentPropertyType == "Double")
                        currentPropertyType = "double";
                    if (currentPropertyType == "Boolean")
                        currentPropertyType = "bool";        
                    if (currentPropertyType == "Char")
                        currentPropertyType = "char";        
                    if (currentPropertyType == "Decimal")
                        currentPropertyType = "decimal";
                    if ("DateTime|Date|byte|sbyte|short|int|long|ushort|uint|ulong|float|double|bool|char|decimal".Contains(currentPropertyType) && currentProperty.Nullable)
                        currentPropertyType = currentPropertyType + "?";
                    if (currentPropertyType == "Binary")
                    {
                        return; //Binary types are not currently being handled
                    }
#>

Private Property Interface<#= currentProperty.Name #> As <#= currentPropertyType #> Implements I<#=entityName#>.<#= currentProperty.Name #>
        Get
            Return <#= currentProperty.Name #>
        End Get
        Set(ByVal value As <#= currentPropertyType #>)
            <#= currentProperty.Name #> = value
        End Set
    End Property
<#+
    } 

    private bool IsPropertyImplementedByBaseClass(EdmType baseType, string propertyName)
    {
        EntityType baseEntity = baseType as EntityType;
        if (baseType == null)
            return false;
        else if (baseEntity.Properties.Contains(propertyName))
        {
            return true;
        }
        else
        {
            return IsPropertyImplementedByBaseClass(baseEntity.BaseType, propertyName);
        }
    }
        

}


#>

