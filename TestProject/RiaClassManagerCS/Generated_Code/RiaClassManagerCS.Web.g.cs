//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RiaClassManagerCS.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Web.Ria.Data;
    using System.Windows.Ria.Data;
    
    
    public sealed partial class SchoolContext : DomainContext
    {
        
        #region Query root fields
        private static IQueryable<Teacher> _TeachersQuery = new Teacher[0].AsQueryable();
        #endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SchoolContext() : 
                base(new HttpDomainClient(new Uri("DataService.axd/RiaClassManagerCS-Web-SchoolService/", System.UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The SchoolService data service URI.
        /// </param>
        public SchoolContext(Uri serviceUri) : 
                base(new HttpDomainClient(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public SchoolContext(DomainClient domainClient) : 
                base(domainClient)
        {
        }
        
        public EntityList<Teacher> Teachers
        {
            get
            {
                return this.Entities.GetEntityList<Teacher>();
            }
        }
        
        #region Query root properties
        public static IQueryable<Teacher> TeachersQuery
        {
            get
            {
                return _TeachersQuery;
            }
        }
        #endregion
        
        #region LoadTeachers method overloads
        /// <summary>
        /// Invokes the server-side method 'GetTeachers' and loads the result into <see cref="Teacher"/>.
        /// </summary>
        [LoadMethod(typeof(Teacher))]
        public void LoadTeachers(IQueryable<Teacher> query, MergeOption mergeOption, object userState)
        {
            base.Load("GetTeachers", null, query, mergeOption, userState);
        }
        
        /// <summary>
        /// Invokes the server-side method 'GetTeachers' and loads the result into <see cref="Teacher"/>.
        /// </summary>
        [LoadMethod(typeof(Teacher))]
        public void LoadTeachers()
        {
            this.LoadTeachers(null, MergeOption.KeepCurrentValues, null);
        }
        
        /// <summary>
        /// Invokes the server-side method 'GetTeachers' and loads the result into <see cref="Teacher"/>.
        /// </summary>
        [LoadMethod(typeof(Teacher))]
        public void LoadTeachers(IQueryable<Teacher> query, object userState)
        {
            this.LoadTeachers(query, MergeOption.KeepCurrentValues, userState);
        }
        #endregion
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new SchoolContextEntityContainer();
        }
        
        internal sealed class SchoolContextEntityContainer : EntityContainer
        {
            
            public SchoolContextEntityContainer()
            {
                this.CreateEntityList<Teacher>(EntityListOperations.All);
            }
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RiaClassManagerCS.Web")]
    public sealed partial class Teacher : Entity
    {
        
        private string _firstName;
        
        private DateTime _hireDate;
        
        private string _lastName;
        
        private int _personID;
        
        [DataMember()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.ValidateProperty("FirstName", value);
                    this.RaiseDataMemberChanging("FirstName");
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                }
            }
        }
        
        [DataMember()]
        public DateTime HireDate
        {
            get
            {
                return this._hireDate;
            }
            set
            {
                if ((this._hireDate != value))
                {
                    this.ValidateProperty("HireDate", value);
                    this.RaiseDataMemberChanging("HireDate");
                    this._hireDate = value;
                    this.RaiseDataMemberChanged("HireDate");
                }
            }
        }
        
        [DataMember()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.ValidateProperty("LastName", value);
                    this.RaiseDataMemberChanging("LastName");
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int PersonID
        {
            get
            {
                return this._personID;
            }
            set
            {
                if ((this._personID != value))
                {
                    this.ValidateProperty("PersonID", value);
                    this.RaiseDataMemberChanging("PersonID");
                    this._personID = value;
                    this.RaiseDataMemberChanged("PersonID");
                }
            }
        }
        
        public override object GetIdentity()
        {
            return this._personID;
        }
    }
}
